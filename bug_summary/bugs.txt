BUG SUMMARY 1 ------------------------------------

Tasksof will return values when called on an instance does not exists 

Description of Bug: When making a GET request to /todos/:id/tasksof for a non-existent todo, the system returns a 200 OK status code with task data from other existing todo instances, rather than returning a 404 Not Found error. This is unexpected, as the correct behavior should be a 404 response indicating that the specified todo does not exist. Additionally, the GET request sometimes returns a project instance, which is confusing given that relationships between todos and projects are not fully defined in the current setup.

Potential Impact of Bug on Operation of System: The unexpected 200 OK response can create confusion for users and developers by obscuring the true state of the todo resource. This may also lead to data retrieval inconsistencies and misinterpretations.

Steps to Reproduce the Bug:
1. Make a GET request to /todos/:id/tasksof for an ID that does not correspond to an existing todo.
2. Observe that a 200 OK status code is returned with tasks data from other existing todos, instead of a 404 Not Found response.


BUG SUMMARY 2 ------------------------------------

Unable to specify ID when creating a new instance. 

Description of Bug: IDs for entities such as todos, projects, and categories change upon recreation.

Potential Impact of Bug on Operation of System: The ID reassignment complicates test automation, as static references become unreliable. This also introduces the risk of referencing outdated IDs

Steps to Reproduce the Bug:
Create an entity (e.g., todo) with a specific title.
Delete and recreate the entity with the same title.
Observe that the new ID differs from the original, requiring dynamic ID retrieval methods in subsequent operations.

BUG SUMMARY 3 ------------------------------------

API returns 200 instead of 404 when retrieving categories for a non-existent project

Description of Bug: When attempting to retrieve categories for a project that doesn't exist in the database, the API respond with a 200 status code, indicating success, rather than the expected 404 status code for "not found". 

Potential Impact of Bug on Operation of System: For the application users relying on this API, clients may incorrectly assume a project exists and proceed with additional actions based on the assumption that categories were succesfully retrieved.

Steps to Reproduce the Bug:
1. Confirm the resource (project with a specific ID) does not exist in the database.
2. Send a request to retrieve categories data related to the non-existent project:
    GET http://localhost:4567/projects/<non-existent-resource-id>/categories
3. Observe the response: Expected: Status code 404. Actual: Status code 200



